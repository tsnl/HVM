test1.c:64:56: error: unknown type name ‘ThdCb’; did you mean ‘Thd’?
   64 | inline static void thread_create(Thd* restrict thread, ThdCb start_routine, void* restrict arg);
      |                                                        ^~~~~
      |                                                        Thd
test1.c:67:56: error: unknown type name ‘ThdCb’; did you mean ‘Thd’?
   67 | inline static void thread_create(Thd* restrict thread, ThdCb start_routine, void* restrict arg) {
      |                                                        ^~~~~
      |                                                        Thd
test1.c: In function ‘thread_join’:
test1.c:80:7: error: ‘HVM_EXIT_CODE_THREAD_OP_FAILED’ undeclared (first use in this function); did you mean ‘HVM_EXIT_CODE_PTHREAD_FAILED’?
   80 |       HVM_EXIT_CODE_THREAD_OP_FAILED,
      |       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |       HVM_EXIT_CODE_PTHREAD_FAILED
test1.c:80:7: note: each undeclared identifier is reported only once for each function it appears in
test1.c: In function ‘collect’:
test1.c:400:5: error: case label does not reduce to an integer constant
  400 |     case DP0: {
      |     ^~~~
test1.c:405:5: error: case label does not reduce to an integer constant
  405 |     case DP1: {
      |     ^~~~
test1.c:410:5: error: case label does not reduce to an integer constant
  410 |     case VAR: {
      |     ^~~~
test1.c:414:5: error: case label does not reduce to an integer constant
  414 |     case LAM: {
      |     ^~~~
test1.c:422:5: error: case label does not reduce to an integer constant
  422 |     case APP: {
      |     ^~~~
test1.c:428:5: error: case label does not reduce to an integer constant
  428 |     case PAR: {
      |     ^~~~
test1.c:434:5: error: case label does not reduce to an integer constant
  434 |     case OP2: {
      |     ^~~~
test1.c:439:5: error: case label does not reduce to an integer constant
  439 |     case U32: {
      |     ^~~~
test1.c:442:5: error: case label does not reduce to an integer constant
  442 |     case CTR: case CAL: {
      |     ^~~~
test1.c:442:15: error: case label does not reduce to an integer constant
  442 |     case CTR: case CAL: {
      |               ^~~~
test1.c: In function ‘reduce’:
test1.c:524:9: error: case label does not reduce to an integer constant
  524 |         case APP: {
      |         ^~~~
test1.c:531:9: error: case label does not reduce to an integer constant
  531 |         case DP0:
      |         ^~~~
test1.c:532:9: error: case label does not reduce to an integer constant
  532 |         case DP1: {
      |         ^~~~
test1.c:544:9: error: case label does not reduce to an integer constant
  544 |         case OP2: {
      |         ^~~~
test1.c:555:9: error: case label does not reduce to an integer constant
  555 |         case CAL: {
      |         ^~~~
test1.c:562:13: error: case label does not reduce to an integer constant
  562 |             case _IF_: {
      |             ^~~~
test1.c:569:13: error: case label does not reduce to an integer constant
  569 |             case _MAIN_: {
      |             ^~~~
test1.c:586:9: error: case label does not reduce to an integer constant
  586 |         case APP: {
      |         ^~~~
test1.c:594:13: error: case label does not reduce to an integer constant
  594 |             case LAM: {
      |             ^~~~
test1.c:609:13: error: case label does not reduce to an integer constant
  609 |             case PAR: {
      |             ^~~~
test1.c:631:9: error: case label does not reduce to an integer constant
  631 |         case DP0:
      |         ^~~~
test1.c:632:9: error: case label does not reduce to an integer constant
  632 |         case DP1: {
      |         ^~~~
test1.c:642:13: error: case label does not reduce to an integer constant
  642 |             case LAM: {
      |             ^~~~
test1.c:677:13: error: case label does not reduce to an integer constant
  677 |             case PAR: {
      |             ^~~~
test1.c:716:13: error: case label does not reduce to an integer constant
  716 |             case U32: {
      |             ^~~~
test1.c:734:13: error: case label does not reduce to an integer constant
  734 |             case CTR: {
      |             ^~~~
test1.c:774:9: error: case label does not reduce to an integer constant
  774 |         case OP2: {
      |         ^~~~
test1.c:788:15: error: case label does not reduce to an integer constant
  788 |               case ADD: c = (a +  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:789:15: error: case label does not reduce to an integer constant
  789 |               case SUB: c = (a -  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:790:15: error: case label does not reduce to an integer constant
  790 |               case MUL: c = (a *  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:791:15: error: case label does not reduce to an integer constant
  791 |               case DIV: c = (a /  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:792:15: error: case label does not reduce to an integer constant
  792 |               case MOD: c = (a %  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:793:15: error: case label does not reduce to an integer constant
  793 |               case AND: c = (a &  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:794:15: error: case label does not reduce to an integer constant
  794 |               case OR : c = (a |  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:795:15: error: case label does not reduce to an integer constant
  795 |               case XOR: c = (a ^  b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:796:15: error: case label does not reduce to an integer constant
  796 |               case SHL: c = (a << b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:797:15: error: case label does not reduce to an integer constant
  797 |               case SHR: c = (a >> b) & 0xFFFFFFFF; break;
      |               ^~~~
test1.c:798:15: error: case label does not reduce to an integer constant
  798 |               case LTN: c = (a <  b) ? 1 : 0;      break;
      |               ^~~~
test1.c:799:15: error: case label does not reduce to an integer constant
  799 |               case LTE: c = (a <= b) ? 1 : 0;      break;
      |               ^~~~
test1.c:800:15: error: case label does not reduce to an integer constant
  800 |               case EQL: c = (a == b) ? 1 : 0;      break;
      |               ^~~~
test1.c:801:15: error: case label does not reduce to an integer constant
  801 |               case GTE: c = (a >= b) ? 1 : 0;      break;
      |               ^~~~
test1.c:802:15: error: case label does not reduce to an integer constant
  802 |               case GTN: c = (a >  b) ? 1 : 0;      break;
      |               ^~~~
test1.c:803:15: error: case label does not reduce to an integer constant
  803 |               case NEQ: c = (a != b) ? 1 : 0;      break;
      |               ^~~~
test1.c:856:9: error: case label does not reduce to an integer constant
  856 |         case CAL: {
      |         ^~~~
test1.c:863:13: error: case label does not reduce to an integer constant
  863 |             case _IF_: {
      |             ^~~~
test1.c:888:13: error: case label does not reduce to an integer constant
  888 |             case _MAIN_: {
      |             ^~~~
test1.c: At top level:
test1.c:941:5: error: variably modified ‘normal_seen_data’ at file scope
  941 | u64 normal_seen_data[NORMAL_SEEN_MCAP];
      |     ^~~~~~~~~~~~~~~~
test1.c: In function ‘normal_go’:
test1.c:960:7: error: case label does not reduce to an integer constant
  960 |       case LAM: {
      |       ^~~~
test1.c:964:7: error: case label does not reduce to an integer constant
  964 |       case APP: {
      |       ^~~~
test1.c:969:7: error: case label does not reduce to an integer constant
  969 |       case PAR: {
      |       ^~~~
test1.c:974:7: error: case label does not reduce to an integer constant
  974 |       case DP0: {
      |       ^~~~
test1.c:978:7: error: case label does not reduce to an integer constant
  978 |       case DP1: {
      |       ^~~~
test1.c:982:7: error: case label does not reduce to an integer constant
  982 |       case OP2: {
      |       ^~~~
test1.c:989:7: error: case label does not reduce to an integer constant
  989 |       case CTR: case CAL: {
      |       ^~~~
test1.c:989:17: error: case label does not reduce to an integer constant
  989 |       case CTR: case CAL: {
      |                 ^~~~
test1.c: In function ‘ffi_normal’:
test1.c:1137:5: warning: implicit declaration of function ‘thread_create’; did you mean ‘pthread_create’? [-Wimplicit-function-declaration]
 1137 |     thread_create(&workers[tid].thread, NULL, &worker, (void*)tid);
      |     ^~~~~~~~~~~~~
      |     pthread_create
test1.c: In function ‘readback_vars’:
test1.c:1190:7: error: case label does not reduce to an integer constant
 1190 |       case LAM: {
      |       ^~~~
test1.c:1199:7: error: case label does not reduce to an integer constant
 1199 |       case APP: {
      |       ^~~~
test1.c:1206:7: error: case label does not reduce to an integer constant
 1206 |       case PAR: {
      |       ^~~~
test1.c:1213:7: error: case label does not reduce to an integer constant
 1213 |       case DP0: {
      |       ^~~~
test1.c:1218:7: error: case label does not reduce to an integer constant
 1218 |       case DP1: {
      |       ^~~~
test1.c:1223:7: error: case label does not reduce to an integer constant
 1223 |       case OP2: {
      |       ^~~~
test1.c:1230:7: error: case label does not reduce to an integer constant
 1230 |       case CTR: case CAL: {
      |       ^~~~
test1.c:1230:17: error: case label does not reduce to an integer constant
 1230 |       case CTR: case CAL: {
      |                 ^~~~
test1.c: In function ‘readback_term’:
test1.c:1260:5: error: case label does not reduce to an integer constant
 1260 |     case LAM: {
      |     ^~~~
test1.c:1272:5: error: case label does not reduce to an integer constant
 1272 |     case APP: {
      |     ^~~~
test1.c:1280:5: error: case label does not reduce to an integer constant
 1280 |     case PAR: {
      |     ^~~~
test1.c:1300:5: error: case label does not reduce to an integer constant
 1300 |     case DP0: case DP1: {
      |     ^~~~
test1.c:1300:15: error: case label does not reduce to an integer constant
 1300 |     case DP0: case DP1: {
      |               ^~~~
test1.c:1308:5: error: case label does not reduce to an integer constant
 1308 |     case OP2: {
      |     ^~~~
test1.c:1312:9: error: case label does not reduce to an integer constant
 1312 |         case ADD: { stk_push(chrs, '+'); break; }
      |         ^~~~
test1.c:1313:9: error: case label does not reduce to an integer constant
 1313 |         case SUB: { stk_push(chrs, '-'); break; }
      |         ^~~~
test1.c:1314:9: error: case label does not reduce to an integer constant
 1314 |         case MUL: { stk_push(chrs, '*'); break; }
      |         ^~~~
test1.c:1315:9: error: case label does not reduce to an integer constant
 1315 |         case DIV: { stk_push(chrs, '/'); break; }
      |         ^~~~
test1.c:1316:9: error: case label does not reduce to an integer constant
 1316 |         case MOD: { stk_push(chrs, '%'); break; }
      |         ^~~~
test1.c:1317:9: error: case label does not reduce to an integer constant
 1317 |         case AND: { stk_push(chrs, '&'); break; }
      |         ^~~~
test1.c:1318:9: error: case label does not reduce to an integer constant
 1318 |         case OR: { stk_push(chrs, '|'); break; }
      |         ^~~~
test1.c:1319:9: error: case label does not reduce to an integer constant
 1319 |         case XOR: { stk_push(chrs, '^'); break; }
      |         ^~~~
test1.c:1320:9: error: case label does not reduce to an integer constant
 1320 |         case SHL: { stk_push(chrs, '<'); stk_push(chrs, '<'); break; }
      |         ^~~~
test1.c:1321:9: error: case label does not reduce to an integer constant
 1321 |         case SHR: { stk_push(chrs, '>'); stk_push(chrs, '>'); break; }
      |         ^~~~
test1.c:1322:9: error: case label does not reduce to an integer constant
 1322 |         case LTN: { stk_push(chrs, '<'); break; }
      |         ^~~~
test1.c:1323:9: error: case label does not reduce to an integer constant
 1323 |         case LTE: { stk_push(chrs, '<'); stk_push(chrs, '='); break; }
      |         ^~~~
test1.c:1324:9: error: case label does not reduce to an integer constant
 1324 |         case EQL: { stk_push(chrs, '='); stk_push(chrs, '='); break; }
      |         ^~~~
test1.c:1325:9: error: case label does not reduce to an integer constant
 1325 |         case GTE: { stk_push(chrs, '>'); stk_push(chrs, '='); break; }
      |         ^~~~
test1.c:1326:9: error: case label does not reduce to an integer constant
 1326 |         case GTN: { stk_push(chrs, '>'); break; }
      |         ^~~~
test1.c:1327:9: error: case label does not reduce to an integer constant
 1327 |         case NEQ: { stk_push(chrs, '!'); stk_push(chrs, '='); break; }
      |         ^~~~
test1.c:1333:5: error: case label does not reduce to an integer constant
 1333 |     case U32: {
      |     ^~~~
test1.c:1339:5: error: case label does not reduce to an integer constant
 1339 |     case CTR: case CAL: {
      |     ^~~~
test1.c:1339:15: error: case label does not reduce to an integer constant
 1339 |     case CTR: case CAL: {
      |               ^~~~
test1.c:1358:5: error: case label does not reduce to an integer constant
 1358 |     case VAR: {
      |     ^~~~
test1.c: In function ‘debug_print_lnk’:
test1.c:1419:5: error: case label does not reduce to an integer constant
 1419 |     case DP0: printf("DP0"); break;
      |     ^~~~
test1.c:1420:5: error: case label does not reduce to an integer constant
 1420 |     case DP1: printf("DP1"); break;
      |     ^~~~
test1.c:1421:5: error: case label does not reduce to an integer constant
 1421 |     case VAR: printf("VAR"); break;
      |     ^~~~
test1.c:1422:5: error: case label does not reduce to an integer constant
 1422 |     case ARG: printf("ARG"); break;
      |     ^~~~
test1.c:1423:5: error: case label does not reduce to an integer constant
 1423 |     case ERA: printf("ERA"); break;
      |     ^~~~
test1.c:1424:5: error: case label does not reduce to an integer constant
 1424 |     case LAM: printf("LAM"); break;
      |     ^~~~
test1.c:1425:5: error: case label does not reduce to an integer constant
 1425 |     case APP: printf("APP"); break;
      |     ^~~~
test1.c:1426:5: error: case label does not reduce to an integer constant
 1426 |     case PAR: printf("PAR"); break;
      |     ^~~~
test1.c:1427:5: error: case label does not reduce to an integer constant
 1427 |     case CTR: printf("CTR"); break;
      |     ^~~~
test1.c:1428:5: error: case label does not reduce to an integer constant
 1428 |     case CAL: printf("CAL"); break;
      |     ^~~~
test1.c:1429:5: error: case label does not reduce to an integer constant
 1429 |     case OP2: printf("OP2"); break;
      |     ^~~~
test1.c:1430:5: error: case label does not reduce to an integer constant
 1430 |     case U32: printf("U32"); break;
      |     ^~~~
test1.c:1431:5: error: case label does not reduce to an integer constant
 1431 |     case F32: printf("F32"); break;
      |     ^~~~
test1.c:1432:5: error: case label does not reduce to an integer constant
 1432 |     case NIL: printf("NIL"); break;
      |     ^~~~
test1.c:1435:15: warning: format ‘%llx’ expects argument of type ‘long long unsigned int’, but argument 2 has type ‘u64’ {aka ‘long unsigned int’} [-Wformat=]
 1435 |   printf(":%llx:%llx", ext, val);
      |            ~~~^        ~~~
      |               |        |
      |               |        u64 {aka long unsigned int}
      |               long long unsigned int
      |            %lx
test1.c:1435:20: warning: format ‘%llx’ expects argument of type ‘long long unsigned int’, but argument 3 has type ‘u64’ {aka ‘long unsigned int’} [-Wformat=]
 1435 |   printf(":%llx:%llx", ext, val);
      |                 ~~~^        ~~~
      |                    |        |
      |                    |        u64 {aka long unsigned int}
      |                    long long unsigned int
      |                 %lx
test1.c: In function ‘main’:
test1.c:1484:24: warning: format ‘%llu’ expects argument of type ‘long long unsigned int’, but argument 2 has type ‘u64’ {aka ‘long unsigned int’} [-Wformat=]
 1484 |   printf("Rewrites: %llu (%.2f MR/s).\n", ffi_cost, rwt_per_sec);
      |                     ~~~^                  ~~~~~~~~
      |                        |                  |
      |                        |                  u64 {aka long unsigned int}
      |                        long long unsigned int
      |                     %lu
test1.c:1485:24: warning: format ‘%llu’ expects argument of type ‘long long unsigned int’, but argument 2 has type ‘u64’ {aka ‘long unsigned int’} [-Wformat=]
 1485 |   printf("Mem.Size: %llu words.\n", ffi_size);
      |                     ~~~^            ~~~~~~~~
      |                        |            |
      |                        |            u64 {aka long unsigned int}
      |                        long long unsigned int
      |                     %lu
make: *** [Makefile:2: test1] Error 1
